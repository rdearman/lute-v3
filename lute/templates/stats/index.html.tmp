{% extends 'base.html' %}

{% block title %}Stats{% endblock %}

{% block header %}Stats{% endblock %}

{% block body %}

<script type="text/javascript" src="{{ url_for('static', filename='vendor/chartjs/chart.umd.js') }}" charset="utf-8"></script>
<script type="text/javascript" src="{{ url_for('static', filename='vendor/chartjs/chartjs-adapter-date-fns.js') }}" charset="utf-8"></script>

<h2 id="calendar-title">Activity Calendar</h2>
<div style="display: flex">
  <div style="display: flex; flex-direction: column; margin-right: 5px; font-size: 0.75em;">
    <span>S</span><span>M</span><span>T</span><span>W</span><span>T</span><span>F</span><span>S</span>
  </div>
  <div id="heatmap" style="
    display: grid;
    grid-template-columns: repeat(13, 1fr);
    grid-auto-rows: 14px;
    gap: 2px;
    margin-bottom: 0.5em;
  "></div>
</div>

<div style="margin-top: 0.5em; font-size: 0.8em">
  <span style="display: inline-block; width: 16px; height: 12px; background-color: rgb(255,255,255); border: 1px solid #ccc; margin-right: 4px;"></span> no activity
  <span style="display: inline-block; width: 16px; height: 12px; background-color: rgb(200,200,255); border: 1px solid #ccc; margin-left: 8px; margin-right: 4px;"></span> low
  <span style="display: inline-block; width: 16px; height: 12px; background-color: rgb(0,0,255); border: 1px solid #ccc; margin-left: 8px; margin-right: 4px;"></span> high
</div>



<h2>Words read</h2>

<table class="statsWordsRead">
  <tr>
    <th />
    <th>today</th>
    <th>last week</th>
    <th>last month</th>
    <th>last year</th>
    <th>all time</th>
  </tr>
  {% for lang in read_table_data %}
  <tr>
    <td>{{ lang.name }}</td>
    <td>{{ lang.counts.day }}</td>
    <td>{{ lang.counts.week }}</td>
    <td>{{ lang.counts.month }}</td>
    <td>{{ lang.counts.year }}</td>
    <td>{{ lang.counts.total }}</td>
  </tr>
  {% endfor %}
</ul>
</table>

<div style="position: relative; aspect-ratio: 3">
  <canvas id="wordCountChart"></canvas>
</div>


<script>
  document.addEventListener('DOMContentLoaded', function() {
    fetch('/stats/data')
      .then(response => response.json())
      .then(data => {
        renderChart(data);
      });

  fetch('/api/usage/heatmap')
	  .then(response => response.json())
	  .then(data => {
	      renderHeatmap(data);
	  });
  });


  function renderHeatmap(data) {
  const container = document.getElementById('heatmap');
  container.innerHTML = '';

  const now = new Date();
  const year = now.getFullYear();
  const startDate = new Date(year, 0, 1);
  const endDate = now;

  // Build date list from Jan 1 to today
  const dates = [];
  for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
    dates.push(new Date(d.getTime())); // Important fix: clone the date properly
  }

  // Determine max count for colour scale
  const max = Math.max(...dates.map(d => data[d.toISOString().split('T')[0]] || 0), 1);

  // Fix: align Jan 1 to correct weekday row (column-down layout)
  const startDay = (startDate.getDay() + 6) % 7;

  let weeks = [];

  // Fill in blanks up to the first weekday
  let firstWeek = new Array(startDay).fill(null);

  // Fill rest of first week
  for (let i = startDay; i < 7 && dates.length; i++) {
    firstWeek.push(dates.shift());
  }
  weeks.push(firstWeek);

  // Build remaining weeks
  while (dates.length) {
    const week = [];
    for (let i = 0; i < 7; i++) {
      week.push(dates.shift() || null);
    }
    weeks.push(week);
  }

  // Set grid
  container.style.display = 'grid';
  container.style.gridTemplateColumns = `repeat(${weeks.length}, 1fr)`;
  container.style.gridTemplateRows = 'repeat(7, 1fr)';
  container.style.gap = '2px';

  // Transpose weeks to columns for S-M-T-W-T-F-S display
  for (let row = 0; row < 7; row++) {
    for (let col = 0; col < weeks.length; col++) {
      const dateObj = weeks[col][row];
      const cell = document.createElement('div');
      cell.style.width = '12px';
      cell.style.height = '12px';
      cell.style.border = '1px solid #ccc';
      cell.style.borderRadius = '2px';

      if (dateObj) {
        const dateStr = dateObj.toISOString().split('T')[0];
        const count = data[dateStr] || 0;
        const intensity = Math.round((count / max) * 255);
        const colour = `rgb(${255 - intensity}, ${255 - intensity}, 255)`;
        cell.style.backgroundColor = colour;
        cell.title = `${dateStr}: ${count} updates`;
      } else {
        cell.style.backgroundColor = 'transparent';
        cell.style.border = 'none';
      }

      container.appendChild(cell);
    }
  }

  const title = document.getElementById('calendar-title');
  if (title) title.textContent = `Activity Calendar (${year})`;
}

  
  function renderChart(data) {
    var ctx = document.getElementById('wordCountChart').getContext('2d');

    datasets = [];

    Object.entries(data).forEach(entry => {
      const [langname, langdata] = entry;

      var daily = {
        label: `${langname}`,
        yAxisID: 'daily',
        data: [],
        borderWidth: 1,
        type: 'bar',  // Bar chart for daily count
      };

      var total = {
        label: `${langname}`,
        yAxisID: 'total',
        data: [],
        borderWidth: 2,
        type: 'line',  // Line chart for running total
        pointRadius: 0,
      };

      langdata.forEach(item => {
        // daily.data.push({x: item.readdate, y: item.wordcount});
        total.data.push({x: item.readdate, y: item.runningTotal});
      });

      // datasets.push(daily);
      datasets.push(total);
    });

    var chart = new Chart(ctx, {
      type: 'bar',
      data: {
        datasets: datasets
      },
      options: {
        maintainAspectRatio: false,
        scales: {
          // Unable to get the "time" scale working correctly,
          // so now the data just has all of the dates.
          x: {
            type: 'time',
            display: true,
            time: {
              unit: 'day'
            },
            title: {
              display: true,
              text: 'Date'
            },
            ticks: {
              major: {
                enabled: true
              },
              color: (context) => context.tick && context.tick.major && '#FF0000',
              font: function(context) {
                if (context.tick && context.tick.major) {
                  return {
                    weight: 'bold'
                  };
                }
              }
            }
          },
          /*
          daily: {
            position: 'left',
            title: {
              display: true,
              text: 'daily',
            },
            grid: {
              display: false
            },
            ticks: {
              beginAtZero: true,
              callback: function(value) {
                return value.toLocaleString(); // Format y-axis labels
              }
            }
            },
            */
          total: {
            position: 'right',
            title: {
              display: true,
              text: 'total',
            },
            grid: {
              display: false
            },
            ticks: {
              beginAtZero: true,
              callback: function(value) {
                return value.toLocaleString(); // Format y-axis labels
              }
            }
          },
        }
      }
    });
  }
</script>

{% endblock %}
